#!/bin/bash

# bash_prompt

# jack@host [~/dotfiles] master [+!?$]
# ⑆

# TODO: Add screenshot of prompt
# Terminal prefs: import Solarized theme and disable bright colors for bold text
# References:
#   terminal color: http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
#   color output: http://tldp.org/LDP/abs/html/colorizing.html
#   bash prompt escape sequences:
#     https://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/bash-prompt-escape-sequences.html
#     http://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html


if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM='xterm-256color';
fi;

prompt_git() {
    local s=""
    local branchName=""

    # check if the current directory is in a git repository
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?) == 0 ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then

            # ensure index is up to date
            git update-index --really-refresh  -q &>/dev/null

            # check for uncommitted changes in the index
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s="$s+";
            fi

            # check for unstaged changes
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s="$s!";
            fi

            # check for untracked files
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s="$s?";
            fi

            # check for stashed files
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s="$s$";
            fi

        fi

        # get the short symbolic ref
        # if HEAD isn't a symbolic ref, get the short SHA
        # otherwise, just give up
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
                      git rev-parse --short HEAD 2> /dev/null || \
                      printf "(unknown)")"

        [ -n "$s" ] && s=" [$s]"

        printf "%s" "${1}${branchName}${2}${s}"
    else
        return
    fi
}

# Define colors used in prompt
# TODO: replace associative array to be compatible with Bash versions < 4.0
declare -A colors

# The following colors assume use of a terminal with a solarized color palette
# like gnome-terminal. If not using a solarized terminal palette, use the colors
# from http://git.io/solarized-colors.
if tput setaf 1 &> /dev/null; then
    tput sgr0; # reset colors
    colors[bold]=$(tput bold);
    colors[reset]=$(tput sgr0);
    colors[black]=$(tput setaf 0);
    colors[gray]=$(tput setaf 12);
    colors[white]=$(tput setaf 7);
    colors[red]=$(tput setaf 1);
    colors[orange]=$(tput setaf 9);
    colors[yellow]=$(tput setaf 3);
    colors[green]=$(tput setaf 2);
    colors[cyan]=$(tput setaf 6);
    colors[blue]=$(tput setaf 4);
    colors[purple]=$(tput setaf 13);
else
    colors[bold]='';
    colors[reset]="\e[0m";
    colors[black]="\e[30m";
    colors[gray]="\e[37m";
    colors[white]="\e[37m";
    colors[red]="\e[31m";
    colors[orange]="\e[91m";
    colors[yellow]="\e[33m";
    colors[green]="\e[32m";
    colors[cyan]="\e[36m";
    colors[blue]="\e[34m";
    colors[purple]="\e[95m";
fi;

# Wrap color sequences in escaped brackets so bash doesn't count them towards
# the character length of the prompt. See a detailed explanation here:
# https://unix.stackexchange.com/a/124409.
for i in "${!colors[@]}"; do
    colors[$i]="\[${colors[$i]}\]"
done

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
    userStyle="${colors[red]}";
else
    userStyle="${colors[orange]}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
    hostStyle="${colors[bold]}${colors[red]}";
else
    hostStyle="${colors[yellow]}";
fi;

# Set the terminal title and prompt.
PS1="${colors[reset]}"
PS1+="\[\e]0;\w\007\]"; # terminal title (set to working directory full path)
PS1+="${userStyle}\u${colors[reset]}"; # username
PS1+="@";
PS1+="${hostStyle}\h${colors[reset]}"; # host
PS1+=" ";
PS1+="${colors[green]}[\w]"; # working directory full path
PS1+=" ";
PS1+="\$(prompt_git \"${colors[cyan]}\" \"${colors[blue]}\")"; # git repository details
PS1+="\n";
PS1+="${colors[white]}"
PS1+=$'\u2446' # prompt icon (⑆)
PS1+=" ";
PS1+="${colors[reset]}";
export PS1;

PS2="${colors[yellow]}→ ${colors[reset]}";
export PS2;

unset colors;
