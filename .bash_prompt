#!/bin/bash

# bash_prompt

# Example:
# nicolas@host: ~/.dotfiles on master [+!?$]
# $

# Screenshot: http://i.imgur.com/DSJ1G.png
# iTerm2 prefs: import Solarized theme (disable bright colors for bold text)
# Color ref: http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
# More tips: http://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html


if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM='xterm-256color';
fi;

prompt_git() {
    local s=""
    local branchName=""

    # check if the current directory is in a git repository
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?) == 0 ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then

            # ensure index is up to date
            git update-index --really-refresh  -q &>/dev/null

            # check for uncommitted changes in the index
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s="$s+";
            fi

            # check for unstaged changes
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s="$s!";
            fi

            # check for untracked files
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s="$s?";
            fi

            # check for stashed files
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s="$s$";
            fi

        fi

        # get the short symbolic ref
        # if HEAD isn't a symbolic ref, get the short SHA
        # otherwise, just give up
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
                      git rev-parse --short HEAD 2> /dev/null || \
                      printf "(unknown)")"

        [ -n "$s" ] && s=" [$s]"

        printf "%s" "${1}${branchName}${2}${s}"
    else
        return
    fi
}

if tput setaf 1 &> /dev/null; then
    tput sgr0; # reset colors
    bold=$(tput bold);
    reset=$(tput sgr0);
    # Solarized colors, taken from http://git.io/solarized-colors.
    black=$(tput setaf 0);
    gray=$(tput setaf 7);
    blue=$(tput setaf 33);
    cyan=$(tput setaf 37);
    green=$(tput setaf 64);
    orange=$(tput setaf 166);
    purple=$(tput setaf 125);
    red=$(tput setaf 124);
    violet=$(tput setaf 61);
    white=$(tput setaf 15);
    # yellow=$(tput setaf 136);
    yellow=$(tput setaf 178);
else
    bold='';
    reset="\e[0m";
    black="\e[1;30m";
    gray="\e[1;38m";
    blue="\e[1;34m";
    cyan="\e[1;36m";
    green="\e[1;32m";
    orange="\e[1;33m";
    purple="\e[1;35m";
    red="\e[1;31m";
    violet="\e[1;35m";
    white="\e[1;37m";
    yellow="\e[1;33m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
    userStyle="${red}";
else
    userStyle="${orange}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
    hostStyle="${bold}${red}";
else
    hostStyle="${yellow}";
fi;

PS1+="\n" # newline
PS1+="\[$green\]\w" # working directory
PS1+="\$(prompt_git \"$reset on $white\")" # git repository details
PS1+="\n"
PS1+="\[$reset$white\]\$ \[$reset\]" # $ (and reset color)

# Set the terminal title and prompt.
PS1="\[\033]0;\W\007\]"; # working directory base name
# PS1+="\[${bold}\]\n"; # newline
# PS1+="\n"; # newline
PS1+="\[${userStyle}\]\u\[${reset}\]"; # username
PS1+="\[${gray}\]@";
PS1+="\[${hostStyle}\]\h\[${reset}\]"; # host
PS1+="\[${gray}\] ";
PS1+="\[${green}\][\w]"; # working directory full path
PS1+="\$(prompt_git \"\[${gray}\] \[${cyan}\]\" \"\[${blue}\]\")"; # Git repository details
PS1+="\n";
PS1+="\[${gray}\]"
PS1+=$'\u2446'
PS1+=" \[${reset}\]"; # `$` (and reset color)
export PS1;

PS2="\[${yellow}\]â†’ \[${reset}\]";
export PS2;

